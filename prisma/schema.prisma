// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// model Example {
// id  String @id @default(auto()) @map("_id") @db.ObjectId
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  musics        Music[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Music {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title Json

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  band   Band?   @relation(fields: [bandId], references: [id])
  bandId String? @db.ObjectId

  composers   Artist[] @relation("composers", fields: [composerIDs], references: [id])
  composerIDs String[] @db.ObjectId

  lyrists   Artist[] @relation("lyrists", fields: [lyristIDs], references: [id])
  lyristIDs String[] @db.ObjectId

  artists   Artist[] @relation("artists", fields: [artistIDs], references: [id])
  artistIDs String[] @db.ObjectId
}

model Album {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title Json
}

model Artist {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name Json

  musicsOnLyrists   Music[]  @relation("lyrists", fields: [musicIDs], references: [id])
  musicsOnComposers Music[]  @relation("composers", fields: [musicIDs], references: [id])
  musicsOnArtists   Music[]  @relation("artists", fields: [musicIDs], references: [id])
  musicIDs          String[] @db.ObjectId
}

model Band {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name Json

  musics Music[]
}

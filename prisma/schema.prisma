// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator zod {
//   provider = "prisma-zod-generator"
//   isGenerateSelect  = true
//   isGenerateInclude = true
// }

generator erd {
  provider = "prisma-erd-generator"
  output="../erd.md"
}

generator trpc {
  provider       = "prisma-trpc-generator"
  withMiddleware = false
  withShield     = false
  contextPath    = "../../../../src/server/router/context"
  isGenerateSelect   = true
  isGenerateInclude  = true
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// model Example {
// id  String @id @default(auto()) @map("_id") @db.ObjectId
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  musics        Music[]
  issues        Issue[]
  pulls  Pull[]

  followedBy    User[]   @relation("UserFollows", fields: [followedByIDs], references: [id])
  followedByIDs String[] @db.ObjectId

  following     User[]   @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs  String[] @db.ObjectId

  bookmarkMusics Music[] @relation("MusicBookmarks", fields: [bookmarkMusicIDs], references: [id])
  bookmarkMusicIDs String[] @db.ObjectId

  bookmarkArtists Artist[] @relation("ArtistBookmarks", fields: [bookmarkArtistIDs], references: [id])
  bookmarkArtistIDs String[] @db.ObjectId

  bookmarkBands Band[] @relation("BandBookmarks", fields: [bookmarkBandIDs], references: [id])
  bookmarkBandIDs String[] @db.ObjectId

  bookmarkAlbums Album[] @relation("AlbumBookmarks", fields: [bookmarkAlbumIDs], references: [id])
  bookmarkAlbumIDs String[] @db.ObjectId
}


model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Music {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  type Type
  title Locales
  score String?
  visibility Visibility
  image String?
  price Int?
  link Link?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  band   Band?   @relation(fields: [bandId], references: [id])
  bandId String? @db.ObjectId

  albums Album[] @relation("AlbumMusics", fields: [albumIDs], references: [id])
  albumIDs String[] @db.ObjectId

  composers   Artist[] @relation("composers", fields: [composerIDs], references: [id])
  composerIDs String[] @db.ObjectId

  lyrists   Artist[] @relation("lyrists", fields: [lyristIDs], references: [id])
  lyristIDs String[] @db.ObjectId

  artists   Artist[] @relation("artists", fields: [artistIDs], references: [id])
  artistIDs String[] @db.ObjectId

  issues Issue[]
  pulls Pull[]

  bookmarks User[] @relation("MusicBookmarks", fields: [userIDs], references: [id])
  userIDs String[] @db.ObjectId
}


model Album {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title Locales

  band Band? @relation(fields: [bandId], references: [id])
  bandId String? @db.ObjectId

  musics Music[] @relation("AlbumMusics", fields: [musicIDs], references: [id])
  musicIDs String[] @db.ObjectId

  artists Artist[] @relation("ArtistAlbums",fields: [artistIDs], references: [id])
  artistIDs String[] @db.ObjectId

  bookmarks User[] @relation("AlbumBookmarks", fields: [userIDs], references: [id])
  userIDs String[] @db.ObjectId
}

model Artist {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name Locales
  link Link?

  writtenMusics   Music[]  @relation("lyrists", fields: [writtenMusicsIDs], references: [id])
  writtenMusicsIDs String[] @db.ObjectId

  composedMusics Music[]  @relation("composers", fields: [composedMusicsIDs], references: [id])
  composedMusicsIDs String[] @db.ObjectId

  musics Music[]  @relation("artists", fields: [musicIDs], references: [id])
  musicIDs          String[] @db.ObjectId

  bands  Band[] @relation(fields: [bandIDs], references: [id])
  bandIDs String[] @db.ObjectId

  albums Album[]  @relation("ArtistAlbums", fields: [albumIDs], references: [id])
  albumIDs          String[] @db.ObjectId

  bookmarks User[] @relation("ArtistBookmarks", fields: [userIDs], references: [id])
  userIDs String[] @db.ObjectId
}

model Band {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name Locales
  link Link?

  musics Music[]

  artists Artist[] @relation(fields: [artistIDs], references: [id])
  artistIDs String[] @db.ObjectId

  albums Album[]

  bookmarks User[] @relation("BandBookmarks", fields: [userIDs], references: [id])
  userIDs String[] @db.ObjectId
}

model Issue{
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  body String

  music Music   @relation(fields: [musicId], references: [id])
  musicId String @db.ObjectId

  user User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Pull{
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  body String
  score PullScore
  status PullStatus

  music Music   @relation(fields: [musicId], references: [id])
  musicId String @db.ObjectId

  user User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

enum Visibility{
  PUBLIC
  PRIVATE
}
enum Type{
  ORIGINAL
  COPY
}
enum PullStatus{
  DRAFT
  OPEN
  CLOSED
  MERGED
}

type PullScore{
  original String
  changed String
}

type Locales {
  ja String?
  en String?
}

type Link{
  streaming StreamingLink?
  account AccountLink?
}

type StreamingLink{
  youtube String?
  spotify String?
  itunes String?
}

type AccountLink {
  twitter String?
  wikipedia String?
}
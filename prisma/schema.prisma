// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator trpc {
  provider             = "prisma-trpc-generator"
  withMiddleware       = false
  contextPath          = "../src/server/context"
  isGenerateSelect     = true
  isGenerateInclude    = true
  generateModelActions = "aggregate,count,create,createMany,delete,deleteMany,findFirst,findFirstOrThrow,findMany,findUnique,findUniqueOrThrow,groupBy,update,updateMany,upsert"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output="../erd.md"
// }

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(uuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  stripeCustomerId String?
  point            Int       @default(0)

  accounts      Account[]
  sessions      Session[]
  musics        Music[]
  issues        Issue[]
  pulls         Pull[]
  comments      Comment[]
  bookmarks     Bookmark[]
  notifications Notification[]
  carts         Cart[]
  transactions  Transaction[]
  reports       Report[]

  followers Follow[] @relation("UserFollower")
  following Follow[] @relation("UserFollowing")
  reported  Report[] @relation("ReportedUser")

  opponents  Vote[] @relation("Opponents")
  proponents Vote[] @relation("Proponents")
}

model Follow {
  id            String         @id @default(uuid())
  notifications Notification[] @relation("FollowNotification")

  follower   User   @relation("UserFollower", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("UserFollowing", fields: [followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resource {
  id        String            @id @default(uuid())
  name      Locale?
  links      Link[]
  unionType ResourceUnionType
  bookmarks Bookmark[]
  tagMaps   TagMap[]

  music  Music?  @relation("MusicResource")
  band   Band?   @relation("BandResource")
  album  Album?  @relation("AlbumResource")
  artist Artist? @relation("ArtistResource")
}

model Locale {
  ja         String?
  en         String?
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String   @unique
}

model Link {
  type   LinkType
  linkId String
  // image
  small  String?
  medium String?
  large  String?

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String
  @@unique([type, resourceId])
}

model Music {
  id          String      @id @default(uuid())
  type        MusicType
  visibillity Visibillity
  isrc        String?
  score       String?
  lyric       String?
  price       Int?

  resource   Resource @relation("MusicResource", fields: [resourceId], references: [id])
  resourceId String   @unique

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  band   Band?   @relation(fields: [bandId], references: [id])
  bandId String?

  albums Album[]

  participations Participation[]
  issues         Issue[]
  pulls          Pull[]
  carts          Cart[]
  transactions   Transaction[]
  reports        Report[]        @relation("ReportedMusic")
}

model Album {
  id  String  @id @default(uuid())
  upc String?

  resource   Resource @relation("AlbumResource", fields: [resourceId], references: [id])
  resourceId String   @unique

  band   Band?   @relation(fields: [bandId], references: [id])
  bandId String?

  musics Music[]

  artists Artist[]
}

model Artist {
  id String @id @default(uuid())

  resource   Resource @relation("ArtistResource", fields: [resourceId], references: [id])
  resourceId String   @unique
  bands      Band[]

  albums Album[]

  participations Participation[]
}

model Band {
  id String @id @default(uuid())

  resource   Resource @relation("BandResource", fields: [resourceId], references: [id])
  resourceId String   @unique

  artists Artist[]
  musics  Music[]
  albums  Album[]
}

model Issue {
  id     String      @id @default(uuid())
  title  String
  body   String
  status IssueStatus @default(OPEN)

  comments Comment[] @relation("IssueComment")

  music   Music  @relation(fields: [musicId], references: [id])
  musicId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Pull {
  id            String     @id @default(uuid())
  title         String
  body          String
  original String
  changed  String
  status        PullStatus @default(DRAFT)
  vote          Vote?

  comments Comment[] @relation("PullComment")

  music   Music  @relation(fields: [musicId], references: [id])
  musicId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Vote {
  id    String   @id @default(uuid())
  start DateTime @default(now())
  end   DateTime

  proponents User[] @relation("Proponents")
  opponents  User[] @relation("Opponents")

  pull   Pull   @relation(fields: [pullId], references: [id])
  pullId String @unique
}

model Comment {
  id   String @id @default(uuid()) @map("_id")
  body String

  pull  Pull?  @relation("PullComment", fields: [unionId], references: [id], map: "comment_pull")
  issue Issue? @relation("IssueComment", fields: [unionId], references: [id], map: "comment_issue")

  user   User   @relation(fields: [userId], references: [id])
  userId String

  notifications Notification[] @relation("CommentNotification")

  unionId   String
  unionType CommentUnionType
}

model Bookmark {
  id String @id @default(uuid())

  notifications Notification[] @relation("BookmarkNotification")

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Participation {
  id String @id @default(uuid())

  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String

  music   Music  @relation(fields: [musicId], references: [id])
  musicId String

  roleMap RoleMap[]

  @@unique([artistId, musicId])
}

model Role {
  id   String @id @default(uuid())
  name String @unique

  roleMap RoleMap[]
}

model RoleMap {
  id String @id @default(uuid())

  role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  participation   Participation @relation(fields: [participationId], references: [id])
  participationId String

  @@unique([roleId, participationId])
}

model Tag {
  id String @id @default(uuid())

  name   String   @unique
  tagMap TagMap[]
}

model TagMap {
  id String @id @default(uuid())

  tag   Tag    @relation(fields: [tagId], references: [id])
  tagId String

  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String

  @@unique([tagId, resourceId])
}

model Notification {
  id String @id @default(uuid())

  bookmarked Bookmark? @relation("BookmarkNotification", fields: [unionId], references: [id], map: "notification_bookmarked")
  followed   Follow?   @relation("FollowNotification", fields: [unionId], references: [id], map: "notification_followed")
  commented  Comment?  @relation("CommentNotification", fields: [unionId], references: [id], map: "notification_commented")

  user   User   @relation(fields: [userId], references: [id])
  userId String

  unionId   String
  unionType NotificationUnionType

  createdAt DateTime @default(now())
  readAt    DateTime @default(now())
}

model Cart {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  music   Music  @relation(fields: [musicId], references: [id])
  musicId String

  @@unique([userId, musicId])
}

model Transaction {
  id String @id @default(uuid())

  type   TransactionType
  amount Int

  stripePaymentIntentId String?

  music   Music?  @relation(fields: [musicId], references: [id])
  musicId String?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
}

model Report {
  id String @id @default(uuid())

  type ReportType
  body String

  reportedUser  User?  @relation("ReportedUser", fields: [unionId], references: [id], map: "report_user")
  reportedMusic Music? @relation("ReportedMusic", fields: [unionId], references: [id], map: "report_music")

  unionType ReportUnionType
  unionId   String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?
}

enum ResourceUnionType {
  Music
  Artist
  Album
  Band
}

enum ReportUnionType {
  User
  Music
  Artist
  Album
  Band
}

enum ReportType {
  COPYRIGHT
  GARBAGE
  TROLL
  OTHER
}

enum TransactionType {
  PURCHASE
  WITHDRAW
  REWARD
  DONATE
}

enum CommentUnionType {
  Pull
  Issue
}

enum NotificationUnionType {
  Follow
  Bookmark
  Comment
}

enum Visibillity {
  PUBLIC
  PRIVATE
}

enum MusicType {
  ORIGINAL
  COPY
}

enum PullStatus {
  DRAFT
  OPEN
  VOTE
  CLOSE
  MERGE
}

enum IssueStatus {
  OPEN
  CLOSE
}

enum LinkType {
  Twitter
  YouTube
  Spotify
  iTunes
}

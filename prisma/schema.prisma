// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator trpc {
  provider       = "prisma-trpc-generator"
  withMiddleware = false
  withShield     = true
  contextPath    = "../src/server/context"
  isGenerateSelect   = true
  isGenerateInclude  = true
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output="../erd.md"
// }

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  stripeCustomerId String?
  point         Int   @default(0)

  accounts      Account[]
  sessions      Session[]
  musics        Music[]
  issues        Issue[]
  pulls  Pull[]
  comments Comment[]
  bookmarks Bookmark[]
  notifications Notification[] 
  carts Cart[]
  transactions Transaction[] 
  reports Report[]

  votes Vote[] @relation(fields:[voteIDs], references: [id])
  voteIDs String[] @db.ObjectId

  followers Follow[] @relation("UserFollower")
  following Follow[] @relation("UserFollowing")
  reported Report[] @relation("ReportedUser")
}

model Follow {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  notifications Notification[] @relation("FollowNotification")

  follower User @relation("UserFollower", fields: [followerId], references: [id])
  followerId String @db.ObjectId

  following User @relation("UserFollowing", fields: [followingId], references: [id])
  followingId String @db.ObjectId
  @@unique([followerId, followingId])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Music {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  type MusicType
  title Locale
  score String?
  visibility Visibility
  price Int?
  link LinkList?

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  band   Band?   @relation(fields: [bandId], references: [id])
  bandId String? @db.ObjectId

  albums Album[] @relation("AlbumMusics", fields: [albumIDs], references: [id])
  albumIDs String[] @db.ObjectId

  participations Participation[]
  issues Issue[]
  pulls Pull[]
  carts Cart[]
  transactions Transaction[]

  bookmarks Bookmark[] @relation("MusicBookmark")
  tagMaps TagMap[] @relation("MusicTagMap")
  reports Report[] @relation("ReportedMusic")
}

model Album {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title Locale
  link LinkList?

  band Band? @relation(fields: [bandId], references: [id])
  bandId String? @db.ObjectId

  musics Music[] @relation("AlbumMusics", fields: [musicIDs], references: [id])
  musicIDs String[] @db.ObjectId

  artists Artist[] @relation("ArtistAlbums",fields: [artistIDs], references: [id])
  artistIDs String[] @db.ObjectId

  bookmarks Bookmark[] @relation("AlbumBookmark")
  tagMaps TagMap[] @relation("AlbumTagMap")
}

model Artist {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name Locale
  link LinkList?

  bands  Band[] @relation(fields: [bandIDs], references: [id])
  bandIDs String[] @db.ObjectId

  albums Album[]  @relation("ArtistAlbums", fields: [albumIDs], references: [id])
  albumIDs          String[] @db.ObjectId

  participations Participation[]

  bookmarks Bookmark[] @relation("ArtistBookmark")
  tagMaps TagMap[] @relation("ArtistTagMap")
}

model Band {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name Locale
  link LinkList?

  artists Artist[] @relation(fields: [artistIDs], references: [id])
  artistIDs String[] @db.ObjectId

  musics Music[]
  albums Album[]

  bookmarks Bookmark[] @relation("BandBookmark")
  tagMaps TagMap[] @relation("BandTagMap")
}

model Issue{
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  body String
  status IssueStatus @default(OPEN)

  comments Comment[] @relation("IssueComment")

  music Music   @relation(fields: [musicId], references: [id])
  musicId String @db.ObjectId

  user User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Pull{
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  body String
  score PullScore
  status PullStatus @default(DRAFT)
  vote Vote?

  comments Comment[] @relation("PullComment")

  music Music   @relation(fields: [musicId], references: [id])
  musicId String @db.ObjectId

  user User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Vote{
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  start DateTime @default(now())
  end DateTime
  good Int @default(0)
  bad Int @default(0)

  pull Pull @relation(fields: [pullId], references: [id])
  pullId String @db.ObjectId @unique

  users User[] @relation(fields:[userIDs] , references: [id])
  userIDs String[] @db.ObjectId
}

model Comment{
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  body String

  pull Pull? @relation("PullComment", fields: [resourceId], references: [id])
  issue Issue? @relation("IssueComment", fields: [resourceId], references: [id])

  user User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  notifications Notification[] @relation("CommentNotification")

  resourceId String @db.ObjectId
  resourceType CommentType 
}

model Bookmark{
  id   String @id @default(auto()) @map("_id") @db.ObjectId

  notifications Notification[] @relation("BookmarkNotification")

  music Music? @relation("MusicBookmark", fields: [resourceId], references: [id])
  band Band? @relation("BandBookmark",fields: [resourceId], references: [id])
  album Album? @relation("AlbumBookmark",fields: [resourceId], references: [id])
  artist Artist? @relation("ArtistBookmark",fields: [resourceId], references: [id])

  user User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  resourceId String @db.ObjectId
  resourceType ResourceType 

  @@unique([resourceId, resourceType, userId])
}

model Participation{
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  artist Artist @relation(fields: [artistId], references: [id])
  artistId String @db.ObjectId

  music Music @relation(fields: [musicId], references:[id])
  musicId String @db.ObjectId

  roleMap RoleMap[]
  @@unique([artistId, musicId])
}

model Role{
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique

  roleMap RoleMap[]
}

model RoleMap{
  id   String @id @default(auto()) @map("_id") @db.ObjectId

  role Role @relation(fields:[roleId], references: [id])
  roleId String @db.ObjectId

  participation Participation @relation(fields: [participationId], references: [id])
  participationId String @db.ObjectId
}

model Tag{
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  
  name String  @unique
  tagMap TagMap[]
}

model TagMap{
  id   String @id @default(auto()) @map("_id") @db.ObjectId

  tag Tag @relation(fields:[tagId], references: [id])
  tagId String @db.ObjectId

  music Music? @relation("MusicTagMap", fields: [resourceId], references: [id])
  band Band? @relation("BandTagMap",fields: [resourceId], references: [id])
  album Album? @relation("AlbumTagMap",fields: [resourceId], references: [id])
  artist Artist? @relation("ArtistTagMap",fields: [resourceId], references: [id])

  resourceId String @db.ObjectId
  resourceType ResourceType 

  @@unique([resourceId, tagId, resourceType])
}

model Notification{
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  bookmarked Bookmark? @relation("BookmarkNotification", fields: [resourceId], references: [id])
  followed Follow? @relation("FollowNotification", fields:[resourceId], references: [id])
  commented Comment? @relation("CommentNotification", fields: [resourceId], references:[id])

  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  resourceId String @db.ObjectId
  resourceType NotificationType

  createdAt DateTime @default(now())
  readAt DateTime @default(now())
}

model Cart {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  music Music @relation(fields: [musicId], references:[id])
  musicId String @db.ObjectId
  @@unique([userId, musicId])
}

model Transaction{
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  type TransactionType
  amount Int

  stripePaymentIntentId String?

  music Music? @relation(fields: [musicId], references:[id])
  musicId String? @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  createdAt DateTime @default(now())
}

model Report {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  type ReportType
  body String

  reportedUser User? @relation("ReportedUser", fields: [resourceId], references: [id])
  reportedMusic Music? @relation("ReportedMusic", fields: [resourceId], references: [id])

  resourceType ReportResourceType
  resourceId String @db.ObjectId

  user User? @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

enum ReportResourceType {
  User
  Music
}
  
enum ReportType {
  COPYRIGHT
  GARBAGE
  TROLL
  OTHER
}

enum TransactionType {
  PURCHASE
  WITHDRAW
  REWARD
  DONATE
}

enum ResourceType {
  Music
  Band
  Artist
  Album
}

enum CommentType {
  Pull
  Issue
}

enum NotificationType {
  Follow
  Bookmark
  Comment
}

enum Visibility {
  PUBLIC
  PRIVATE
}

enum MusicType {
  ORIGINAL
  COPY
}

enum PullStatus {
  DRAFT
  OPEN
  VOTE
  CLOSE
  MERGE
}

enum IssueStatus {
  OPEN
  CLOSE
}

type PullScore {
  original String
  changed String
}

type Locale {
  ja String?
  en String?
}

type LinkList {
  streaming StreamingLink?
  account AccountLink?
}

type StreamingLink {
  youtube Link?
  spotify Link?
  itunes Link?
}

type AccountLink {
  twitter String?
  wikipedia String?
}

type Link {
  id String?
  image Image?
}

type Image {
  size ImageSize?
}

type ImageSize {
  small String?
  medium String?
  large String?
}

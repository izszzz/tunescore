// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  musics        Music[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Music {
  id    String @id @default(cuid())
  title String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  band   Band?   @relation(fields: [bandId], references: [id])
  bandId String?

  composers MusicsOnComposers[]
  lyrists   MusicsOnLyrists[]
  artists   MusicsOnArtists[]
  Artist    Artist?             @relation(fields: [artistId], references: [id])
  artistId  String?
}

model Album {
  id    String @id @default(cuid())
  title String
}

model Artist {
  id                String              @id @default(cuid())
  name              String
  musics            Music[]
  MusicsOnComposers MusicsOnComposers[]
  MusicsOnLyrists   MusicsOnLyrists[]
  MusicsOnArtists   MusicsOnArtists[]
}

model Band {
  id     String  @id @default(cuid())
  name   String
  musics Music[]
}

model MusicsOnComposers {
  music      Music  @relation(fields: [musicId], references: [id])
  musicId    String
  composer   Artist @relation(fields: [composerId], references: [id])
  composerId String

  @@id([musicId, composerId])
}

model MusicsOnLyrists {
  music    Music  @relation(fields: [musicId], references: [id])
  musicId  String
  lyrist   Artist @relation(fields: [lyristId], references: [id])
  lyristId String

  @@id([musicId, lyristId])
}

model MusicsOnArtists {
  music    Music  @relation(fields: [musicId], references: [id])
  musicId  String
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String

  @@id([musicId, artistId])
}
